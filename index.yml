course_title: Intro to Unix for Data Science
course_description: >-
  The Unix command line has survived and thrived for almost fifty years because
  it lets people to do complex things with just a few keystrokes. Sometimes
  called "the duct tape of programming", it helps users combine existing
  programs in new ways, automate repetitive tasks, and run programs on clusters
  and clouds that may be halfway around the world. This lesson will introduce
  its key elements and show you how to use them efficiently.
programming_language: python
chapters:
  - chapter_title: Why the Command Line?
    chapter_description: >-
      Three-minute video explaining that the command line is an interface to the
      operating system, just like the GUIs that learners are probably familiar
      with, but because it's textual, it supports history and automation.
    exercises:
      - type: MultipleChoiceExercise
        title: How are they connected?
        content: >-
          What is the relationship between the graphical file explorer that most
          people use and the shell?

          - The file explorer lets you view and edit files, while the shell lets
          you run programs.

          - The file explorer is built on top of the shell.

          - The shell is part of the operating system, while the file explorer
          is separate.

          - They are both interfaces for issuing commands to the operating
          system.
      - type: MultipleChoiceExercise
        title: What is a shell?
        content: |-
          What kind of thing is a shell?
          - a program
          - an operating system
          - a text-only mode of the file explorer
  - chapter_title: Core Commands
    chapter_description: >-
      - `whoami`

      - `pwd` and a comment on how cryptic commands are

      - interpreting output of `pwd`: folders containing folders

      - `ls` (depends on a certain file setup)

      - `cat`

      - Editing text files (use `nano` and explain how a shell can have multiple
      personalities)

      - Text vs. binary files

      - `cp`

      - `mv`

      - `rm`

      - `mkdir` and `rmdir`
    exercises:
      - type: MultipleChoiceExercise
        title: Absolute and Relative Paths
        content: >-
          Starting from `/Users/jasmine/data/`, which of the following commands
          could Jasmine use to navigate to  `/Users/jasmine`?


          1. `cd .`

          2. `cd /`

          3. `cd /home/jasmine`

          4. `cd ../..`

          5. `cd ~`

          6. `cd home`

          7. `cd ~/data/..`

          8. `cd`

          9. `cd ..`
      - type: MultipleChoiceExercise
        title: Relative Path Resolution
        content: >-
          Using the filesystem diagram below, if `pwd` displays
          `/Users/jasmine`, what will `ls ../backup` display?


          1.  `../backup: No such file or directory`

          2.  `2012-12-01 2013-01-08 2013-01-27`

          3.  `2012-12-01/ 2013-01-08/ 2013-01-27/`

          4.  `original report_final report_sub`
      - type: NormalExercise
        title: Listing Options
        content: >-
          Given the filesystem shown below, if `pwd` displays `/Users/backup`,
          and `-r` tells `ls` to display things in reverse order, what command
          will display:


          ```

          report_sub/ report_final/ original/

          ```


          1.  `ls pwd`

          2.  `ls -r -F`

          3.  `ls -r -F /Users/backup`

          4.  Either #2 or #3 above, but not #1.
      - type: NormalExercise
        title: Combining Listing Options
        content: >-
          The command `ls -R` lists the contents of directories recursively,
          i.e., lists their sub-directories, sub-sub-directories, and so on in
          alphabetical order at each level. The command `ls -t` lists things by
          time of last change, with most recently changed files or directories
          first. In what order does `ls -R -t` display things?


          1. All files and then all directories in order of last change.

          2. All directories in alphabetical order followed by all files in
          order of last change.

          3. Directories alphabetically by level, and their contents in order of
          last change.

          4. None of the above.
